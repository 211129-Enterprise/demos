package com.revature.models;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Scanner;

public class Student implements Serializable {
		
	//1000 - evertime we create a new student, it increases by 1
	public static int GLOBAL_ID = 1000;
	private static Scanner scan = new Scanner(System.in);
	
	private String firstName, lastName;
	private int gradeYear; // 1 - Freshman, 2 - Sophomore
	private String studentId; //We have to concatenate the grade year plus an autogenerated ID
	
	// Every student has a list of courses they take
	private List<Course> courses = new ArrayList<Course>(); // Every time we instantiate a new
															// student object, they'll have an
															// empty course list
	
	private double tuitionBalance = 0; // We're initializing the balance as $0

	
	
	
	
	// Constructor will be firstName, lastName, and gradeYear
	public Student(String firstName, String lastName, int gradeYear) {
		super();
		this.firstName = firstName;
		this.lastName = lastName;
		this.gradeYear = gradeYear;
		
		setStudentId();
		
		// When we all the constructor, let's sysout the instance variables
		System.out.println("\n" + firstName + " " + lastName + " " + gradeYear + " " + studentId);
	}
	
	
	
	// It will auto-increment some value
	private void setStudentId() {
		GLOBAL_ID++;
		this.studentId = gradeYear + "" + GLOBAL_ID; 
		//necessary to concatenate so as not to mathematically add
	}
	
	
	
	public void enroll() {
		
		// Step 1. Create an empty array list of courses to add
		List<Course> coursesToAdd = new ArrayList<Course>();
		
		// Step 2. Open up a while loop and have the user enter "q" to quit
		boolean isDone = false;
		
		while (!isDone) { //isDone == false
			
			// Step 3. Prompt the user to enter a course name and capture it in a string variable
			System.out.print("\nEnter the name of a course to enroll in:\n > ");
			String courseName = scan.next();// necessary to repeat the loop
			
			if(!courseName.equalsIgnoreCase("q")) { // Ignore Case can handle upper and lower case to determine if user entered "q"
				// Step 4. Use that name to build a course object and add it to courses to add list
				Course course = new Course(courseName);
				coursesToAdd.add(course);
				
				// Step 5. increase the student's balance field
				tuitionBalance += course.COST_OF_COURSE; //Tuition balance is equal to tuition balance + the static cost of course (600)
			
			} else { // User opted to quit
				System.out.println("*******************\n...quiting program\n*******************\n\n");
				isDone = true;
			}			
		}
	
		
		// Step 6. set the student's course list equal to the course list we create here
		this.courses = coursesToAdd; // this means the courses list
		
		// Step 7. Print it all out!
		System.out.println("ENROLLED IN " + courses.toString());
		
	}

	
	//view balance method
	public void viewBalance() {
		System.out.printf("Your balance is $%.2f.\n", this.tuitionBalance);
	}
	
	//pay tuition balance
	public void payTuition() {
		viewBalance();
		
		// Step 1. Prompt enter payment amount
		System.out.print("Please enter a payment amount:\n > $");
		
		// Step 2. Capture the amount as a double
		double payment = scan.nextDouble();
		
		// Step 3. Subtract the amount that we capture from the object's tuition
		tuitionBalance -= payment;
		
		
		// Step 4. Print out thank you and show the payment again
		System.out.printf("Thank you for your payment of $%.2f.\n", payment);
		
		// Step 5. View the updated balance
		viewBalance();
	}
	
	
	
	//GETTERS and SETTERS
	public String getFirstName() {
		return firstName;
	}



	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}



	public String getLastName() {
		return lastName;
	}



	public void setLastName(String lastName) {
		this.lastName = lastName;
	}



	public int getGradeYear() {
		return gradeYear;
	}



	public void setGradeYear(int gradeYear) {
		this.gradeYear = gradeYear;
	}



	public String getStudentId() {
		return studentId;
	}



	public void setStudentId(String studentId) {
		this.studentId = studentId;
	}



	public List<Course> getCourses() {
		return courses;
	}



	public void setCourses(List<Course> courses) {
		this.courses = courses;
	}



	public double getTuitionBalance() {
		return tuitionBalance;
	}



	public void setTuitionBalance(double tuitionBalance) {
		this.tuitionBalance = tuitionBalance;
	}



	// Add overrides for toString, hashCode, and equals
	@Override
	public String toString() {
		return "Student [firstName=" + firstName + ", lastName=" + lastName + ", gradeYear=" + gradeYear
				+ ", studentId=" + studentId + ", courses=" + courses + ", tuitionBalance=" + tuitionBalance + "]";
	}

	@Override
	public int hashCode() {
		return Objects.hash(courses, firstName, gradeYear, lastName, studentId, tuitionBalance);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Student other = (Student) obj;
		return Objects.equals(courses, other.courses) && Objects.equals(firstName, other.firstName)
				&& gradeYear == other.gradeYear && Objects.equals(lastName, other.lastName)
				&& Objects.equals(studentId, other.studentId)
				&& Double.doubleToLongBits(tuitionBalance) == Double.doubleToLongBits(other.tuitionBalance);
	}
	
	
	
	
}

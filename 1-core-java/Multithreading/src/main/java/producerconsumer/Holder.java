package producerconsumer;

public class Holder {
	
	int contents = 0; // one thread will be a PRODUCER thread and produce by increasing the value from 0 to 10
	private boolean isAvailable = false;
	
	/*
	 * This class will hold all of the values generated by another thread.
	 * 
	 * Let's feature a method called setVal() which the produce will call on this object
	 * Let's feature a method called getVal() is what the consumer calls on this object
	 */
	
	public synchronized void setVal(int val) {
		
		// isAvailable == true
		while (isAvailable) {
			
			// this method will be invoked by the producer
			
			try {
				wait(); // This method forces the current thread to wait until some other thread
					   // invokes notify() or notifyAll() on the same object
						// this toggles a an object's monitor
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			
		}
		
		// if !isAvailable ....
		contents = val;
		isAvailable = true;
		
		notifyAll(); 		
	}
	
	public synchronized int getVal() {
		
		// this method will return the value of the holder and will be invoked by the COnsumer
		
		// isAvailable == true
		while (!isAvailable) {
			
			// this method will be invoked by the producer
			
			try {
				wait(); // This method forces the current thread to wait until some other thread
					   // invokes notify() or notifyAll() on the same object
						// this toggles a an object's monitor
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			
		}
		isAvailable = false;		
		
		notifyAll();
		
		return contents;
		
	}
	
	
	
	

}
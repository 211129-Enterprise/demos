package com.revature.producerconsumer;

public class Holder {
	
	int contents = 0; // One thread will be a PRODUCER thread and will
					 	// produce by increasing the value from 0 to 10
	private boolean isAvailable = false;
	
	
	
	
	
	/*
	 * This class will hold all of the values generated by another thread.
	 * 
	 * Let's feature a method called setVal(); // The PRODUCER will call on this object
	 * Let's feature a method called getVal(); // The CONSUMER will call on this object
	 */
	public synchronized void setVal(int val) {
		
		// while (isAvailable == true)
		while(isAvailable) {
			
			// This method will be invoked by the producer
			try {
				wait(); // This method forces the current thread to wait until some other thread 
						// invokes notify() or notifyAll on the same object.
						// This toggles an object's monitor
				
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		}
		
		// If isAvailable is false...
		contents = val;
		isAvailable = true;
		
		notifyAll();
		
	}
	
	
	
	
	
	public synchronized int getVal() {
		//This method will return the value of the holder and will be invoked by the consumer
		
		// while (isAvailable == false)
		while(!isAvailable) {
			
			// This method will be invoked by the consumer
			try {
				wait(); // This method forces the current thread to wait until some other thread 
						// invokes notify() or notifyAll on the same object.
						// This toggles an object's monitor
				
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		}
		
		// If isAvailable is false...
		isAvailable = false;
		
		notifyAll();
		
		return contents;
		
	}

}

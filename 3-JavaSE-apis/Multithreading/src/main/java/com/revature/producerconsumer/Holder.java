package com.revature.producerconsumer;

public class Holder {
	int contents = 0; // one thread will be a PRODUCER thread and produce by increasing value from 0 to 10
	private boolean isAvailable = false;
	
	/**
	 * This class will hold all of the values generated by another thread.
	 * 
	 * Let's feature a method called setVal() which the producer will call on the object
	 * Let's feature a method called getVal() to return the value to the consumer
	 * 
	 */
	
	public synchronized void setVal(int val) {
		// this method will be invoked by the producer
		
		// while isAvailable == true
		while (isAvailable) {
			
			try {
				wait(); // this method forces the current thread to wait until some other thread
						// invokes notify() or notifyAll() on the same object.
						// this toggles an object's monitor
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} 
		}	
			// if !isAvailable ...
			contents = val;
			isAvailable = true;
			notifyAll();
		
	}
	
	public synchronized int getVal() {
		// this method will return the value of the holder, and will be invoked byt he consumer
		while (!isAvailable) {
			
			try {
				wait(); // this method forces the current thread to wait until some other thread
						// invokes notify() or notifyAll() on the same object.
						// this toggles an object's monitor
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} 
		}
		
		
		isAvailable = false;
		notifyAll();
		return contents;
		
	}
}

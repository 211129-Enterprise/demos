<?xml version = "1.0" encoding = "utf-8"?>
<!DOCTYPE hibernate-configuration SYSTEM 
"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
   <session-factory>
   <!-- DTD  -->
      <property name = "hibernate.dialect">
         org.hibernate.dialect.PostgreSQLDialect
      </property>
      
      <property name = "hibernate.connection.driver_class">
         org.postgresql.Driver
      </property>
      
      <!-- Assume test is the database name -->
      
      <property name = "hibernate.connection.url">
          <!--
         jdbc:postgresql://enterprise211129.cvtq9j4axrge.us-east-1.rds.amazonaws.com/postgres
         -->
  
		jdbc:postgresql://localhost:5433/postgres
	
      </property>
         <!--
         
         this  if you have a schema
       <property name = "hibernate.default_schema">
      	  marouane
         </property>
         -->
         
      <property name = "hibernate.connection.username">
        postgres
      </property>
      
      <property name = "hibernate.connection.password">
        27112015
      </property>
      
         <property name = "hibernate.connection.pool_size">10</property>
         <!-- The most important proprtie -->
         
          <property name = "hibernate.hbm2ddl.auto"> create </property>
          
          <!-- CREATE, VALIDATE, UPDATE, NONE -->

		<!-- CREATE: drops all existing tables and objects with the names provided 
			in annotations, and then Hibernate will recreate the schema for us (CREATE 
			isn't the best for production, but useful for development -->

		<!-- UPDATE: hibernate will not delete anything, but only add to a schema 
			if there are objects that haven't been included yet -->

		<!-- VALIDATE: best for production. Checks to make sure that everything 
			is as expected (all tables and objects are where they're supposed to be) -->

		<!-- NONE: hibernate will not do anything (no removals, no addition) -->
		
		 <property name = "hibernate.show_sql"> true </property>
      
      <!-- List of XML mapping files -->
      <mapping class= "com.revature.models.Crime"/>
       <mapping class = "com.revature.models.SuperVillain"/>
       <mapping class = "com.revature.models.SuperPrison"/>
       
       <!-- List of XML   
      <mapping resource = "com.revature.models.SuperPrison"/>   mapping files -->
    
      
      
   </session-factory>
</hibernate-configuration>